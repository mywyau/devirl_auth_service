name: devirl-auth-service Unit and Integration Tests

on:
  push:
    branches-ignore:
      - main

jobs:
  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: "adopt"

      - name: Set up Scala and sbt
        uses: olafurpg/setup-scala@v14
        with:
          java-version: "11"
          sbt-version: "1.10.7"

      - name: Cache SBT
        uses: actions/cache@v3
        with:
          path: |
            ~/.ivy2/cache
            ~/.sbt
            ~/.m2
          key: ${{ runner.os }}-sbt-${{ hashFiles('**/build.sbt') }}
          restore-keys: |
            ${{ runner.os }}-sbt-

      - name: Install Dependencies
        run: sbt update

      - name: Run Unit Tests
        run: sbt test

  integration-tests:
    name: Run Integration Tests
    runs-on: ubuntu-latest

    container:
      image: openjdk:11

    env:
      REDIS_HOST: redis
      REDIS_PORT: "6379"

      DB_HOST: postgres
      DB_PORT: "5432"
      DB_USER: dev_quest_test_user
      DB_PASSWORD: turnip
      DB_NAME: dev_quest_test_db

      # LocalStack environment variables
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
      AWS_DEFAULT_REGION: us-east-1
      LOCALSTACK_HOST: localstack
      AWS_ENDPOINT_URL: http://localstack:4566

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: dev_quest_test_user
          POSTGRES_PASSWORD: turnip
          POSTGRES_DB: dev_quest_test_db
        options: >-
          --health-cmd "pg_isready -U dev_quest_test_user -d dev_quest_test_db"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      # Add LocalStack service
      localstack:
        image: localstack/localstack:latest
        env:
          SERVICES: "s3" # Specify the AWS services you need
          DEBUG: "1"
          DOCKER_HOST: "unix:///var/run/docker.sock"
          DEFAULT_REGION: "us-east-1"
          DATA_DIR: "/tmp/localstack/data"
        ports:
          - "4566:4566" # LocalStack default port
        # healthcheck:
        #   test: ["CMD-SHELL", "curl -f http://localhost:4566/health || exit 1"]
        #   interval: 10s
        #   timeout: 5s
        #   retries: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: "adopt"

      - name: Set up Scala and sbt
        uses: olafurpg/setup-scala@v14
        with:
          java-version: "11"
          sbt-version: "1.10.7"

      - name: Cache SBT
        uses: actions/cache@v3
        with:
          path: |
            ~/.ivy2/cache
            ~/.sbt
            ~/.m2
          key: ${{ runner.os }}-sbt-${{ hashFiles('**/build.sbt') }}
          restore-keys: |
            ${{ runner.os }}-sbt-

      - name: Install Dependencies
        run: sbt update

      - name: Install redis-cli
        run: apt-get update && apt-get install -y redis-tools

      - name: Wait for Redis
        run: |
          for i in {1..30}; do
            if redis-cli -h redis -p 6379 ping | grep PONG; then
              echo "Redis is ready";
              break;
            fi
            echo "Waiting for Redis...";
            sleep 1;
          done

      - name: Install PostgreSQL Client
        run: apt-get update && apt-get install -y postgresql-client

      - name: Wait for PostgreSQL
        env:
          PGPASSWORD: turnip
        run: |
          for i in {1..30}; do
            if pg_isready -h postgres -p 5432 -U dev_quest_test_user; then
              echo "Postgres is ready";
              break;
            fi
            echo "Waiting for Postgres...";
            sleep 1;
          done

      - name: Reset Database
        env:
          PGPASSWORD: turnip
        run: |
          psql -h postgres -p 5432 -U dev_quest_test_user -d postgres -c "DROP DATABASE IF EXISTS dev_quest_test_db;"
          psql -h postgres -p 5432 -U dev_quest_test_user -d postgres -c "CREATE DATABASE dev_quest_test_db;"

      - name: Install AWS CLI v2 (no sudo)
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "/tmp/awscliv2.zip"
          unzip /tmp/awscliv2.zip -d /tmp
          /tmp/aws/install -i /tmp/aws-cli -b /tmp/aws-bin
        shell: bash

      - name: Add AWS CLI to PATH
        run: echo "/tmp/aws-bin" >> $GITHUB_PATH

      - name: Create S3 bucket “test-bucket”
        run: |
          aws --endpoint-url=${AWS_ENDPOINT_URL} \
              s3api create-bucket \
              --bucket test-bucket   

      - name: Run Integration Tests
        run: sbt it/test
